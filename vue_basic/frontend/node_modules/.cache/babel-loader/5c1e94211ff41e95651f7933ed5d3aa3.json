{"remainingRequest":"/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/node_modules/babel-loader/lib/index.js!/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/src/common/service.api.js","dependencies":[{"path":"/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/src/common/service.api.js","mtime":1675386893431},{"path":"/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/.babelrc","mtime":1618457042000},{"path":"/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1675389547935},{"path":"/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/node_modules/babel-loader/lib/index.js","mtime":1675389548635}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["axios","store","router","Define","$alert","configSet","fetchDataErrorCodes","service","create","baseURL","process","env","VUE_APP_URL","withCredentials","timeout","interceptors","request","use","config","error","console","Promise","reject","response","res","data","Error","message","status","e","log","MNetSend","options","_options","url","method","param","headers","isMorpheus","resolve","head","body","then","result","catch","M","net","http","send","server","SERVER_NAME","path","indicator","show","cancelable","success","recevedData","setting","errorCode","errorMessage","loadingClose","app","$loading","close"],"sources":["/Users/dongchangkim/workspace/Morpheus/vue_basic/frontend/src/common/service.api.js"],"sourcesContent":["/**\n * 공통 API SERVER axios 서비스\n */\n\nimport axios from \"axios\";\nimport store from \"@/store\";\nimport router from \"@/router\";\nimport Define from \"@/common/define\";\nimport { $alert } from \"@/common/EventBus\";\n\nlet configSet = {};\nlet fetchDataErrorCodes = []\n\n\nconst service = axios.create({\n    baseURL: process.env.VUE_APP_URL,\n    withCredentials: true, // send cookies when cross-domain requests\n    timeout: 20000, // request timeout time ms\n});\n\n/* axios 인터셉터 처리 [요청] */\nservice.interceptors.request.use(\n  (config) => {\n    configSet = config;\n\n    return config;\n  },\n  (error) => {\n    console.error('service.interceptors.request.use', error); // for debug\n    return Promise.reject(error);\n  }\n);\n\n/* axios 인터셉터 처리 [응답] */\nservice.interceptors.response.use(\n\n  async function (response) {\n    const res = response.data;\n\n    try {\n      /* 상태값에 따른 에러처리 해보기 */\n      // if (response.status !== 200 || (response.request.responseType.toUpperCase() !== \"BLOB\" && response.data.status !== 'OK')) {\n      //   res.success = false\n      // }\n      // else {\n      //   res.success = true\n      // }\n      // if (!res.success) {\n      //   if (chkCd(res.status)) {\n      //     const tmpConfig = configSet;\n      //     return await fetchData(tmpConfig)\n      //   }\n\n      //   return Promise.reject(new Error(res.message || 'Error'))\n      // }\n      \n      // if (response.request.responseType.toUpperCase() === \"BLOB\") {\n        return response;\n      // } else {\n      //   return res.data;\n      // }\n    }\n    catch (e) {\n      // loadingClose();\n      return Promise.reject(new Error(res.message || 'Error'))\n    }\n  },\n  async function (error) {\n\n    let message = '오류가 발생했습니다. 관리자에게 문의하여 주시기 바랍니다.'\n    const response = error.response || {};\n    const { status, config } = response;\n    let data;\n    try{\n      if(response.data) {\n        if(response.data.data) {\n          data = response.data.data;\n        } else {\n          data = response.data;\n        }\n      }\n    } catch (e) {\n      data = response.data;\n    }\n    try {\n      /* 세션연장처리 */\n\n    }\n    catch (e) {\n      message = e\n      console.log(e)\n      // loadingClose();\n    }\n\n    await $alert(message);\n\n    return Promise.reject(data);\n  }\n);\n\nexport default service;\n\n\n/**\n * 모피어스 GW 서버 네이티브 HTTP 통신\n * @param options\n * @returns {Promise<unknown>}\n */\nexport const MNetSend = (options) => {\n  const _options = {\n      url: options.url || \"\",\n      method: options.method || \"POST\",\n      param: options.param || {},\n      headers: options.headers|| {},\n  };\n\n  console.log(_options);\n\n  if (!isMorpheus()) {\n    return new Promise((resolve, reject) => {\n      _options.data = {};\n      _options.data.head = {};\n      _options.data.body = _options.param;\n\n      service(_options)\n        .then((result) => {\n          resolve(result);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  } else {\n    return new Promise((resolve, reject) => {\n        M.net.http.send({\n            server: Define.SERVER_NAME,\n            path: _options.url,\n            method: _options.method,\n            timeout: 30000,\n            //userData: {\n            //    Authorization: _options.headers,\n            //},\n            indicator: {\n                show: false,\n                message: \"Loading..\",\n                cancelable: true,\n            },\n            data: _options.param,\n            success: function (recevedData, setting) {\n                resolve(recevedData); // data 바로 출력됨\n            },\n            error: function (errorCode, errorMessage, setting) {\n                reject(errorCode, errorMessage);\n            },\n        });\n    });\n  }\n  \n};\n\n/**\n * 로그인화면으로 이동전에 기존에 로딩을 강제숨김 처리\n */\nconst loadingClose = () => {\n  try {\n    router.app.$loading().close();\n  } catch (e) {\n    console.error('router.app.$loading()', e);\n  }  \n}"],"mappings":"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"}]}